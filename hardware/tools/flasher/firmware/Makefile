# Makefile for programming the ATtiny85
# modified the one generated by CrossPack

DEVICE      = attiny85
CLOCK      = 8000000
PROGRAMMER = -c usbasp
OBJECTS    = flasher.o
# for ATTiny85
# see http://www.engbedded.com/fusecalc/
FUSES       = -U lfuse:w:0x62:m -U hfuse:w:0xdf:m -U efuse:w:0xff:m

# Tune the lines below only if you know what you are doing:
AVRDUDE = avrdude $(PROGRAMMER) -p $(DEVICE)
COMPILE = avr-gcc -Wall -Os -DF_CPU=$(CLOCK) -mmcu=$(DEVICE)

# symbolic targets:
all:	flasher.hex

.c.o:
	$(COMPILE) -c $< -o $@

.S.o:
	$(COMPILE) -x assembler-with-cpp -c $< -o $@

.c.s:
	$(COMPILE) -S $< -o $@

flash:	all
	$(AVRDUDE) -U flash:w:flasher.hex:i

fuse:
	$(AVRDUDE) $(FUSES)

# Xcode uses the Makefile targets "", "clean" and "install"
install: flash fuse

clean:
	rm -f flasher.hex flasher.elf $(OBJECTS)

# file targets:
flasher.elf: $(OBJECTS)
	$(COMPILE) -o flasher.elf $(OBJECTS)

flasher.hex: flasher.elf
	rm -f flasher.hex
	avr-objcopy -j .text -j .data -O ihex flasher.elf flasher.hex
	avr-size --format=avr --mcu=$(DEVICE) flasher.elf

#cpp:
#	$(COMPILE) -E flasher.c
